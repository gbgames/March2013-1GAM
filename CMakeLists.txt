CMAKE_MINIMUM_REQUIRED (VERSION 2.6)

SET(GB_PROJECT_NAME 1GAM-March2013-GBGames)

PROJECT (${GB_PROJECT_NAME})

IF(DEFINED CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING "Choose the type of
   build, options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug
   Release RelWithDebInfo MinSizeRel.")
ELSE()
   SET(CMAKE_BUILD_TYPE Debug CACHE STRING "Choose the type of build,
	  options are: None(CMAKE_CXX_FLAGS or CMAKE_C_FLAGS used) Debug Release
	  RelWithDebInfo MinSizeRel.")
ENDIF()
SET(CMAKE_CXX_FLAGS_Debug "-g -O0 -Wall -W -Wreturn-type -Wno-unused-parameter -Werror")
SET(CMAKE_CXX_FLAGS_Release "-O2 -Wall -Werror -Wstrict-aliasing=2 -mwindows") 

SET(${GB_PROJECT_NAME}_VERSION_MAJOR "0")
SET(${GB_PROJECT_NAME}_VERSION_MINOR "1")
SET(${GB_PROJECT_NAME}_VERSION_PATCH "0")
SET(${GB_PROJECT_NAME}_RELEASE_TYPE "${CMAKE_BUILD_TYPE}")
SET(${GB_PROJECT_NAME}_VERSION_STATUS "WIP")

IF(DEFINED ${GB_PROJECT_NAME}_DEMO_STATUS)
   SET(${GB_PROJECT_NAME}_DEMO_STATUS ${GB_PROJECT_NAME}_DEMO_STATUS CACHE STRING "Choose the 
   demo status, options are: Demo Full.")
ELSE()
   SET(${GB_PROJECT_NAME}_DEMO_STATUS Demo CACHE STRING "Choose the 
   demo status, options are: Demo Full.")
ENDIF()

SET (CMAKE_INCLUDE_CURRENT_DIR ON)
SET(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR})

#TODO: This isn't very environment-independent.
SET(BUILD_ENV_LIB /home/gberardi/Projects)

FIND_PACKAGE(SDL REQUIRED)
#FIND_PACKAGE(SDL_image REQUIRED)
FIND_PACKAGE(SDL_mixer REQUIRED)
FIND_PACKAGE(SDL_ttf REQUIRED)

IF (NOT SDL_mixer_FOUND)
	    MESSAGE("Possible Bug in SDL_mixer")
ENDIF (NOT SDL_mixer_FOUND)

SET(README_FILE_NAME "README-LINUX.txt")
IF(WIN32)
	MESSAGE("INCLUDED DIRS : ${SDL_INCLUDE_DIR} ${SDLIMAGE_INCLUDE_DIR} ${SDLMIXER_INCLUDE_DIR} ${SDLTTF_INCLUDE_DIR}")
	MESSAGE("LIBS : ${SDL_LIBRARY} ${SDLIMAGE_LIBRARY} ${SDLMIXER_LIBRARY} ${SDLTTF_LIBRARY}")

	SET(SDL_INCLUDE_DIR ${CMAKE_FIND_ROOT_PATH}/include/SDL)
	#SET(SDLIMAGE_INCLUDE_DIR ${CMAKE_FIND_ROOT_PATH}/include/SDL)
	SET(SDLMIXER_INCLUDE_DIR ${CMAKE_FIND_ROOT_PATH}/include/SDL)
	SET(SDLTTF_INCLUDE_DIR ${CMAKE_FIND_ROOT_PATH}/include/SDL)
	SET(README_FILE_NAME "README-WINDOWS.txt")

	MESSAGE("INCLUDED DIRS : ${SDL_INCLUDE_DIR} ${SDLIMAGE_INCLUDE_DIR} ${SDLMIXER_INCLUDE_DIR} ${SDLTTF_INCLUDE_DIR}")
	MESSAGE("LIBS : ${SDL_LIBRARY} ${SDLIMAGE_LIBRARY} ${SDLMIXER_LIBRARY} ${SDLTTF_LIBRARY}")
ENDIF(WIN32)

IF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
	SET(README_FILE_NAME "README-OSX.txt")
ENDIF(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")


INCLUDE_DIRECTORIES(${SDL_INCLUDE_DIR})
#INCLUDE_DIRECTORIES(${SDLIMAGE_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${SDLMIXER_INCLUDE_DIR})
INCLUDE_DIRECTORIES(${SDLTTF_INCLUDE_DIR})

ADD_SUBDIRECTORY (source)
ADD_SUBDIRECTORY (resources)

FILE (GLOB THE_PROJECT_RESOURCES resources/*.png resources/*.wav)
FILE (GLOB THE_PROJECT_MUSIC_RESOURCES resources/*.ogg)
FILE (GLOB THE_PROJECT_FONT_RESOURCES resources/Fonts/*.ttf resources/Fonts/*.TXT)
FILE (GLOB THE_PROJECT_LEVEL_RESOURCES resources/Levels/*.png)
INSTALL (FILES ${THE_PROJECT_RESOURCES} DESTINATION resources)
INSTALL (FILES ${THE_PROJECT_MUSIC_RESOURCES} DESTINATION resources)
INSTALL (FILES ${THE_PROJECT_FONT_RESOURCES} DESTINATION resources/Fonts)
INSTALL (FILES ${THE_PROJECT_LEVEL_RESOURCES} DESTINATION resources/Levels)
INSTALL (FILES resources/EULA.txt DESTINATION .)
INSTALL (FILES resources/LGPL.txt DESTINATION .)
INSTALL (FILES ${README_FILE_NAME} DESTINATION .)


SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "1GAM entry for January 2013 by GBGames.")
SET(CPACK_PACKAGE_VENDOR "GBGames")
#SET(CPACK_PACKAGE_DESCRIPTION_FILE "${CMAKE_CURRENT_SOURCE_DIR}/ReadMe.txt")
#SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/Copyright.txt")
SET(CPACK_PACKAGE_VERSION_MAJOR ${${GB_PROJECT_NAME}_VERSION_MAJOR})
SET(CPACK_PACKAGE_VERSION_MINOR ${${GB_PROJECT_NAME}_VERSION_MINOR})
SET(CPACK_PACKAGE_VERSION_PATCH ${${GB_PROJECT_NAME}_VERSION_PATCH})
SET(CPACK_PACKAGE_FILE_NAME ${GB_PROJECT_NAME}-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}-${CMAKE_SYSTEM_NAME}-${${GB_PROJECT_NAME}_DEMO_STATUS})


if(WIN32 AND NOT UNIX)
	SET(CPACK_NSIS_DISPLAY_NAME "January2013-1GAM")
	SET(CPACK_NSIS_HELP_LINK "http://gbgames.com/")
	SET(CPACK_NSIS_URL_INFO_ABOUT "http://gbgames.com/")
	SET(CPACK_NSIS_CONTACT "gberardi@gbgames.com")
	SET(CPACK_NSIS_MUI_ICON "${PROJECT_SOURCE_DIR}/resources/${GB_PROJECT_NAME}.ico")
	SET(CPACK_NSIS_MUI_UNIICON "${PROJECT_SOURCE_DIR}/resources/${GB_PROJECT_NAME}Uninstall.ico")
	SET(CPACK_NSIS_MODIFY_PATH OFF)
	#Until NSIS is configured correctly.
	SET(CPACK_GENERATOR "ZIP") 
	SET(CPACK_PACKAGE_INSTALL_REGISTRY_KEY "GBGames")
	SET(CPACK_PACKAGE_EXECUTABLES "${GB_PROJECT_NAME}-bin.exe" "January 2013 1GAM by GBGames")
	SET(CPACK_NSIS_MENU_LINKS  "${GB_PROJECT_NAME}-bin.exe" "January 2013 1GAM by GBGames!")
	FILE (GLOB WIN32_DLLS libs-win32/*.dll)
	INSTALL (FILES ${WIN32_DLLS} DESTINATION .)
ELSE()
	SET(CPACK_GENERATOR "TGZ")
endif(WIN32 AND NOT UNIX)

INCLUDE (CPack)
